<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Sento Blog</title>
    <link>https://robgc.github.io/sento-blog/posts/</link>
    <description>Recent content in Posts on Sento Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 31 Mar 2019 22:18:33 +0200</lastBuildDate>
    
	<atom:link href="https://robgc.github.io/sento-blog/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Building Sento Crawler</title>
      <link>https://robgc.github.io/sento-blog/posts/crawler/</link>
      <pubDate>Sun, 31 Mar 2019 22:18:33 +0200</pubDate>
      
      <guid>https://robgc.github.io/sento-blog/posts/crawler/</guid>
      <description>During the development of Sento Crawler I had to face some technical challenges and take important steps towards the definition and implementation of the data pipeline.
The technical goals At the start of development a initial set of requirements were set:
 Easily configurable: the user should not need to read the code or modify it in order to set up an instance. Asynchronous: the tool was expected to perform heavy usage of network communications, asynchronous programming was a strong requirement, as we always want loose no time on blocked I/O operations.</description>
    </item>
    
    <item>
      <title>Defining the architecture</title>
      <link>https://robgc.github.io/sento-blog/posts/architecture/</link>
      <pubDate>Sun, 31 Mar 2019 14:44:52 +0200</pubDate>
      
      <guid>https://robgc.github.io/sento-blog/posts/architecture/</guid>
      <description>In this post I will introduce you the architecture of Sento. The project consists of the following components:
Crawler This piece of software communicates with Twitter&amp;rsquo;s and OpenStreeMap Nominatim&amp;rsquo;s APIs and does the following tasks:
 Extracts the text content in tweets beloging to the current available trends. Extracts metadata information from the trends themselves*, such as:  How did the trend rank during its lifetime in a certain location.</description>
    </item>
    
    <item>
      <title>print(&#39;Hello world!&#39;)</title>
      <link>https://robgc.github.io/sento-blog/posts/welcome/</link>
      <pubDate>Sat, 01 Dec 2018 19:09:49 +0100</pubDate>
      
      <guid>https://robgc.github.io/sento-blog/posts/welcome/</guid>
      <description>Welcome! My name is Roberto Garc√≠a Calero, I&amp;rsquo;m a Software Engineering student at the University of Seville and also a proud member of Geographica, an awesome location intelligence company!
I want to introduce you Sento, my Undergraduate Thesis Project.
The idea Sento, sentiment in Esperanto, will be the combination of the sentiment analysis teachings I will learn during this year and the professional experience I&amp;rsquo;m gaining as a GIS (Geographic Information System) engineer at my job.</description>
    </item>
    
  </channel>
</rss>